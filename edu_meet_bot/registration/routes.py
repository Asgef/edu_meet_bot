from aiogram import Router, F
from datetime import datetime
from edu_meet_bot.db import async_session
from aiogram.fsm.context import FSMContext
from edu_meet_bot.session.enum_fields import OrderStatus, SlotStatus
from edu_meet_bot.settings import TUTOR_TG_ID, PRICE, SUPPORT_CHAT_ID
from edu_meet_bot.session.models import Order, Slot
from aiogram.filters.state import StateFilter
from edu_meet_bot.support.views import answer_button
from aiogram.exceptions import TelegramBadRequest
from edu_meet_bot.registration.utils import (
    get_available_slots, group_slots_by_time_period, handle_no_slots,
    handle_exceptions, get_academic_subjects, get_usr_id, get_daily_slots
)
from edu_meet_bot.registration.views import (
    select_week, select_slot, select_day, academic_subject_button
)
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
)
import logging


logger = logging.getLogger(__name__)

router = Router(name="edu_meet_bot/registration")


@router.message(F.text == "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ")
@handle_exceptions
async def on_register_subject_click(
        message: Message, state: FSMContext
) -> None:
    await state.clear()  # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user = message.from_user
    student_tg_id = user.id
    username = user.username
    user_first_name = user.first_name
    student_name = username if username else user_first_name

    async with async_session() as db_session:
        student_id = await get_usr_id(db_session, student_tg_id)
        tutor_id = await get_usr_id(db_session, TUTOR_TG_ID)

    await state.update_data(
        student_name=student_name, student_id=student_id,
        student_tg_id=student_tg_id, tutor_id=tutor_id
    )

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    async with async_session() as db_session:
        subjects = await get_academic_subjects(db_session)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
    keyboard = academic_subject_button(subjects)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(
        "üìò <b>–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–±–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç:</b>\n\n"
        "‚¨áÔ∏è –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ.",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    # –ñ–¥—ë–º –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
    await state.set_state("waiting_for_subject")


@router.callback_query(F.data == "back_to_subjects")
@handle_exceptions
async def back_to_subjects(callback: CallbackQuery, state: FSMContext) -> None:
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ö–µ–Ω–¥–ª–µ—Ä –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
    await on_register_subject_click(callback.message, state)


@router.callback_query(F.data.startswith('select_date|'))
async def on_subject_selected(
        callback: CallbackQuery, state: FSMContext
) -> None:
    parts = callback.data.split('|')

    if len(parts) == 3:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥–º–µ—Ç–µ –ø—Ä–∏—à–ª–∏
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø—Ä–µ–¥–º–µ—Ç–µ –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –µ–µ
        _, subject_id_str, subject_name = parts
        subject_id = int(subject_id_str)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            subject_id=subject_id, subject_name=subject_name
        )

    # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à—ë–ª –≤–æ–∑–≤—Ä–∞—Ç –∏–∑ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥", –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    today = datetime.now().date()  # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
    now_time = datetime.now().time()  # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    logging.info(f'–°–µ–≥–æ–¥–Ω—è >>>>>>>>>>>>>: {today}, –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now_time}')

    async with async_session() as db_session:
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
        slots = await get_available_slots(
            db_session, start_date=today, current_time=now_time
        )

    if not slots:
        await handle_no_slots(callback.message, "–º–µ—Å—è—Ü")
        return

    logging.info(f'–°–ª–æ—Ç—ã >>>>>>>>>>>>>>>>>: {slots}')

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –ø–æ –Ω–µ–¥–µ–ª—è–º
    weeks = group_slots_by_time_period(slots, period='week', today=today)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–µ–¥–µ–ª–∏
    keyboard = select_week(
        weeks,
        label_func=lambda start, end:
        f"üìÖ {start.strftime('%d.%m')} - {end.strftime('%d.%m.%Y')}",
        callback_prefix="select_week"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –Ω–µ–¥–µ–ª–∏
    await callback.message.edit_text(
        "üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é –¥–ª—è –∑–∞–ø–∏—Å–∏:</b>\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç.",
        reply_markup=keyboard,
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith('select_week|'))
@handle_exceptions
async def on_select_week_click(callback: CallbackQuery) -> None:
    _, week_start_str, week_end_str = callback.data.split('|')
    week_start = datetime.fromisoformat(week_start_str).date()
    week_end = datetime.fromisoformat(week_end_str).date()

    async with async_session() as db_session:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ—Ç—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –≤—ã–±—Ä–∞–Ω–Ω–æ–π –Ω–µ–¥–µ–ª–∏
        slots = await get_available_slots(db_session, week_start, week_end)

    logging.info(f'–ù–µ–¥–µ–ª—å–Ω—ã–µ —Å–ª–æ—Ç—ã >>>>>>>>>>>>>>>>>: {slots}')

    if not slots:
        await handle_no_slots(
            callback.message,
            f"–Ω–µ–¥–µ–ª—é —Å {week_start.strftime('%d.%m.%Y')} –ø–æ "
            f"{week_end.strftime('%d.%m.%Y')}"
        )
        return

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –ø–æ –¥–Ω—è–º
    days = group_slots_by_time_period(slots, period='day')

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è
    keyboard = select_day(
        period=days,
        label_func=lambda day: f"üìÖ {day.strftime('%A, %d.%m.%Y')}",
        callback_prefix="select_day",
        week_start=week_start_str,
        week_end=week_end_str
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –¥–Ω—è
    await callback.message.edit_text(
        f"üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:</b>\n\n"
        f"üìÜ <i>–î–∏–∞–ø–∞–∑–æ–Ω:</i> {week_start.strftime('%d.%m.%Y')} - "
        f"{week_end.strftime('%d.%m.%Y')}\n\n"
        f"‚¨áÔ∏è –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–∏–Ω –∏–∑ –¥–Ω–µ–π –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è.",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –¥–Ω—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")


@router.callback_query(F.data.startswith('select_day|'))
@handle_exceptions
async def on_select_day_click(callback: CallbackQuery) -> None:
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –¥–Ω—è –∏–∑ callback_data
    _, day_str, week_start_str, week_end_str = callback.data.split('|')
    selected_day = datetime.fromisoformat(day_str).date()

    async with async_session() as db_session:
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è
        slots = await get_daily_slots(
            db_session, selected_day, datetime.now().time()
        )
    slots.sort(key=lambda slot: slot.time_start)
    logging.info(f'–°–ª–æ—Ç—ã –¥–ª—è –¥–Ω—è >>>>>>>>>>>>>> {selected_day}: {slots}')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
    if not slots:
        return await handle_no_slots(callback.message, period_desc="–¥–µ–Ω—å")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
    keyboard = select_slot(
        slots,
        label_func=lambda
        slot: f"üïí {slot.time_start.strftime('%H:%M')} - "
              f"{slot.time_end.strftime('%H:%M')}",
        callback_prefix="select_slot",
        week_start=week_start_str,
        week_end=week_end_str
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏
    await callback.message.edit_text(
        f"üïí <b>–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:</b>\n\n"
        f"üìÖ <i>–î–∞—Ç–∞:</i> {selected_day.strftime('%A, %d.%m.%Y')}\n\n"
        f"‚¨áÔ∏è –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω–æ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫–æ–Ω –Ω–∏–∂–µ.",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")


@router.callback_query(F.data.startswith('select_slot|'))
@handle_exceptions
async def on_slot_selected(
        callback: CallbackQuery, state: FSMContext
) -> None:
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ª–æ—Ç –∏ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ callback_data
    _, slot_id, slot_time, slot_date = callback.data.split('|')
    slot_id = int(slot_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ—Ç –≤ FSM
    await state.update_data(
        slot_id=slot_id, slot_time=slot_time, slot_date=slot_date
    )

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_comment"
                )
            ]
        ]
    )

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –≤–≤–æ–¥–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    sent_message = await callback.message.edit_text(
        "‚úçÔ∏è <b>–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>\n\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å:\n"
        "‚Äî –í–∞—à–µ –∏–º—è\n"
        "‚Äî –í–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è\n\n"
        "üí° –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω—É–∂–µ–Ω, –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
    await state.update_data(skip_message_id=sent_message.message_id)
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    await state.set_state("waiting_for_comment")


@router.callback_query(F.data == "skip_comment")
@handle_exceptions
async def on_skip_comment(callback: CallbackQuery, state: FSMContext) -> None:
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback-–∑–∞–ø—Ä–æ—Å–∞
    await callback.answer()

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –ø—É—Å—Ç—ã–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
    await confirm_registration(callback.message, state)


@router.message(StateFilter("waiting_for_comment"))
@handle_exceptions
async def on_comment_entered(message: Message, state: FSMContext) -> None:
    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥—ë–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    comment = message.text
    await state.update_data(comment=comment)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
    data = await state.get_data()

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    skip_message_id = data.get("skip_message_id")
    if skip_message_id:
        try:
            await message.bot.delete_message(
                chat_id=message.chat.id, message_id=skip_message_id
            )
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    await confirm_registration(message, state)


async def confirm_registration(message: Message, state: FSMContext) -> None:
    data = await state.get_data()

    await message.answer(
        f"‚úÖ <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
        f"üìò <b>–ü—Ä–µ–¥–º–µ—Ç:</b> {data['subject_name']}\n"
        f"üìÖ <b>–î–∞—Ç–∞:</b> {data['slot_date']}\n"
        f"‚è∞ <b>–í—Ä–µ–º—è:</b> {data['slot_time']}\n"
        f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {data.get('comment', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
        f"üíµ <b>–¶–µ–Ω–∞:</b> {PRICE} ‚ÇΩ / —á–∞—Å\n"
        "‚ö†Ô∏è –ü–æ—Å–ª–µ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã 50% –≤–∞—à –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.\n\n"
        "üí° –ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_registration"
                )]
            ]
        ),
        parse_mode="HTML"
    )
    await state.set_state("registration_confirmed")


@router.callback_query(F.data == "confirm_registration")
@handle_exceptions
async def registration(callback: CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logging.info(f"Registration data >>>>>>>>>>>>>>>>>>>>: {data}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–ª–æ—Ç–∞
    async with async_session() as db_session:
        slot = await db_session.get(Slot, data["slot_id"])
        if slot.status != SlotStatus.AVAILABLE:
            await callback.answer(
                "‚ùå –°–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, "
                "–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ª–æ—Ç."
            )
            await state.clear()
            return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–ª–æ—Ç–∞
    slot.status = SlotStatus.PENDING
    slot.student_id = data["student_id"]

    # –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑
    order = Order(
        student_id=data["student_id"],
        tutor_id=data["tutor_id"],
        slot_id=data["slot_id"],
        subject_id=data["subject_id"],
        status=OrderStatus.PENDING,
        comment=data.get("comment"),
        date=slot.date,
    )
    db_session.add(order)
    await db_session.commit()

    registration_message = (
        f"‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ!</b>\n\n"
        f"üìÖ <b>–î–∞—Ç–∞:</b> {data["slot_date"]} "
        f"{slot.time_start.strftime('%H:%M')}-"
        f"{slot.time_end.strftime('%H:%M')}\n"
        f"üìò <b>–ü—Ä–µ–¥–º–µ—Ç:</b> {data['subject_name']}\n"
        f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> "
        f"{'–ù–µ —É–∫–∞–∑–∞–Ω' if not data['comment'] else data['comment']}"
    )

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback.message.answer(registration_message, parse_mode="HTML")

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    logging.info(
        f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ SUPPORT_CHAT_ID >>>>>>> : {SUPPORT_CHAT_ID}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    bot = callback.bot
    try:
        await bot.send_message(
            chat_id=SUPPORT_CHAT_ID,
            text=(
                f"üî• <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b> üî•\n\n"
                f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {data['student_name']}\n"
                f"üìÖ <b>–î–∞—Ç–∞:</b> {data["slot_date"]} "
                f"{slot.time_start.strftime('%H:%M')}-"
                f"{slot.time_end.strftime('%H:%M')}\n"
                f"üìò <b>–ü—Ä–µ–¥–º–µ—Ç:</b> {data['subject_name']}\n"
                f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> "
                f"{'–ù–µ —É–∫–∞–∑–∞–Ω' if not data['comment'] else data['comment']}"
            ),
            parse_mode='HTML',
            reply_markup=answer_button(
                data["student_tg_id"], data["student_name"]
            )
        )
        logging.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏.")
    except TelegramBadRequest as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {e}")

    # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()
