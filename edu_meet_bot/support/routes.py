from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from edu_meet_bot.support.fsm import StepsQuestionMessage, StepsAnswerMessage
from aiogram.fsm.context import FSMContext
from edu_meet_bot import settings
from edu_meet_bot.support.utils import escape_markdown
from edu_meet_bot.support.views import answer_button
# from edu_meet_bot.debug.utils import log_json_data


router = Router(name="edu_meet_bot/support")


@router.message(Command("getchatid"))
# @log_json_data
async def get_chat_id(message: Message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    await message.answer(
        f"Chat id is: *{chat_id}*\n"
        f"Your id is: *{user_id}*", parse_mode='Markdown'
    )


@router.message(F.text == "–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º")
async def get_client_question(message: Message, state: FSMContext) -> None:
    await message.answer(
        '–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É, –æ–Ω –æ—Ç–≤–µ—Ç–∏—Ç –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è:'
    )
    await state.set_state(StepsQuestionMessage.GET_MASSAGE)


@router.callback_query(F.data.startswith('answer|'))
async def on_answer_click(callback: CallbackQuery, state: FSMContext) -> None:
    callback_data = callback.data.split('|')
    user_id, user_name = int(callback_data[1]), callback_data[2]
    await state.update_data(user_id=user_id, user_name=user_name)
    await state.set_state(StepsAnswerMessage.GET_MASSAGE)
    await callback.message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}.",
        parse_mode='Markdown'
    )
    await callback.answer()


@router.message(StepsQuestionMessage.GET_MASSAGE)
async def send_client_question_massage(
        message: Message, state: FSMContext, bot: Bot
) -> None:
    user_name = message.from_user.username or message.from_user.first_name
    question = message.caption\
        if message.content_type == 'photo' else message.text

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Markdown (–±–∞–∑–æ–≤–æ–≥–æ)
    user_name = escape_markdown(user_name)
    question = escape_markdown(question)

    if message.content_type == 'photo' and message.photo:
        photo_id = message.photo[-1].file_id
        await bot.send_photo(
            settings.SUPPORT_CHAT_ID,
            photo=photo_id,
            caption=(
                f"‚úâ | –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å\n–û—Ç: {user_name}\n–í–æ–ø—Ä–æ—Å: `{question}`\n\n"
                f"üìù üëá"
            ),
            parse_mode='Markdown',
            reply_markup=answer_button(message.from_user.id, user_name)
        )
    else:
        await bot.send_message(
            settings.SUPPORT_CHAT_ID,
            text=(
                f"‚úâ | –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å\n–û—Ç: {user_name}\n–í–æ–ø—Ä–æ—Å: `{question}`\n\n"
                f"üìù üëá"
            ),
            parse_mode='Markdown',
            reply_markup=answer_button(message.from_user.id, user_name)
        )

    await message.reply(
        '–í–∞—à –≤–æ–ø—Ä–æ—Å –±—ã–ª –æ—Ç–æ—Å–ª–∞–Ω! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.',
        parse_mode='Markdown'
    )
    await state.clear()


@router.message(StepsAnswerMessage.GET_MASSAGE)
async def get_admin_answer(
        message: Message, state: FSMContext, bot: Bot
) -> None:
    data = await state.get_data()
    user_id = data.get('user_id')
    user_name = data.get('user_name')
    answer = message.text

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.send_message(

        user_id,
        f"‚úâ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n–û—Ç–≤–µ—Ç –æ—Ç —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞:\n\n`{answer}`",
        parse_mode='Markdown'
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
    await message.answer(
        f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name}.",
        parse_mode='Markdown'
    )
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
